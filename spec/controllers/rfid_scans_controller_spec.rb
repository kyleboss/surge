require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RfidScansController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # RfidScan. As you add validations to RfidScan, be sure to
  # adjust the attributes here as well.
  before(:each) do
    address = FactoryGirl.create(:address)
    @hospital = FactoryGirl.create(:hospital, address_id: address.id)
    @rfid_reader = FactoryGirl.create(:rfid_reader, hospital_id: @hospital.id)
    @rfid = FactoryGirl.create(:rfid)
    @updated_rfid = FactoryGirl.create(:updated_valid_rfid)
    @trackable = FactoryGirl.create(:updated_valid_trackable)

  end

  let(:valid_transient_attributes) {
    {
        rfid_reader_hardware_identifier:  @rfid_reader.hardware_identifier,
        rfid_hardware_identifier:         @rfid.hardware_identifier
    }
  }

  let(:invalid_transient_attributes) { { rfid_reader_hardware_identifier: nil, rfid_hardware_identifier: nil } }

  let(:valid_attributes) {
    FactoryGirl.attributes_for(:rfid_scan, rfid_reader_id: @rfid_reader.id, rfid_id: @rfid.id)
  }

  let(:new_attributes) {
    FactoryGirl.attributes_for(:updated_valid_rfid_scan,
                               rfid_reader_id: @rfid_reader.id,
                               rfid_id:      @updated_rfid_id)
  }
  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:invalid_rfid_scan, rfid_reader_id: nil, rfid_id: @rfid.id)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RfidScansController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all rfid_scans as @rfid_scans" do
      rfid_scan = RfidScan.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:rfid_scans)).to eq([rfid_scan])
    end
  end

  describe "GET #show" do
    it "assigns the requested rfid_scan as @rfid_scan" do
      rfid_scan = RfidScan.create! valid_attributes
      get :show, {:id => rfid_scan.to_param}, valid_session
      expect(assigns(:rfid_scan)).to eq(rfid_scan)
    end
  end

  describe "GET #new" do
    it "assigns a new rfid_scan as @rfid_scan" do
      get :new, {}, valid_session
      expect(assigns(:rfid_scan)).to be_a_new(RfidScan)
    end
  end

  describe "GET #edit" do
    it "assigns the requested rfid_scan as @rfid_scan" do
      rfid_scan = RfidScan.create! valid_attributes
      get :edit, {:id => rfid_scan.to_param}, valid_session
      expect(assigns(:rfid_scan)).to eq(rfid_scan)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      before(:each) do
        @barcode_reader = FactoryGirl.create(:barcode_reader, hospital_id: @hospital.id)
      end

      it "creates a new RfidScan" do
        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    @rfid_reader.id,
                           barcode_reader_id: @barcode_reader.id)
        barcode = FactoryGirl.create(:barcode)
        FactoryGirl.create(:barcode_trackable_pairing, barcode_id: barcode.id, trackable_id: @trackable.id)
        valid_barcode_scan_attributes = FactoryGirl.attributes_for(:barcode_scan,
                                                                   barcode_reader_id:  @barcode_reader.id,
                                                                   barcode_id:         barcode.id)
        BarcodeScan.create! valid_barcode_scan_attributes
        expect {
          post :create, {:rfid_scan => valid_transient_attributes}, valid_session
        }.to change(RfidScan, :count).by(1)
      end

      it "creates a new RfidTrackablePairing" do
        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    @rfid_reader.id,
                           barcode_reader_id: @barcode_reader.id)
        barcode = FactoryGirl.create(:barcode)
        valid_barcode_scan_attributes = FactoryGirl.attributes_for(:barcode_scan,
                                                                barcode_reader_id:  @barcode_reader.id,
                                                                barcode_id:         barcode.id)
        BarcodeTrackablePairing.create! barcode_id: barcode.id, trackable_id: @trackable.id
        puts "barcode_id: #{barcode.id}"
        BarcodeScan.create! valid_barcode_scan_attributes
        expect {
          post :create, {:rfid_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(1)
      end

      it "doesn't create a new RfidTrackablePairing if longer than 5 seconds" do
      FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                         rfid_reader_id:    @rfid_reader.id,
                         barcode_reader_id: @barcode_reader.id)
      barcode = FactoryGirl.create(:barcode)
      FactoryGirl.create(:barcode_trackable_pairing, barcode_id: barcode.id, trackable_id: @trackable.id)
      valid_barcode_scan_attributes = FactoryGirl.attributes_for(:barcode_scan,
                                                                 barcode_id:         barcode.id,
                                                                 barcode_reader_id:  @barcode_reader.id,
                                                                 created_at:      Time.now - 6.minutes)
        BarcodeScan.create! valid_barcode_scan_attributes
        expect {
          post :create, {:rfid_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(0)
      end

      it "doesn't create a new RfidTrackablePairing if barcode already paired" do
        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    @rfid_reader.id,
                           barcode_reader_id: @barcode_reader.id)
        barcode = FactoryGirl.create(:barcode)
        FactoryGirl.create(:barcode_trackable_pairing, barcode_id: barcode.id, trackable_id: @trackable.id)
        FactoryGirl.create(:rfid_trackable_pairing, rfid_id: @rfid.id, trackable_id: @trackable.id)
        valid_barcode_scan_attributes = FactoryGirl.attributes_for(:barcode_scan,
                                                                   barcode_reader_id:  @barcode_reader.id,
                                                                   barcode_id:         barcode.id)
        BarcodeScan.create! valid_barcode_scan_attributes
        expect {
          post :create, {:rfid_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(0)
      end

      it "doesn't create a new RfidTrackablePairing if readers not compatible" do
        second_rfid_reader = FactoryGirl.create(:rfid_reader, hospital_id: @hospital.id)
        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    second_rfid_reader.id,
                           barcode_reader_id: @barcode_reader.id)
        barcode = FactoryGirl.create(:barcode)
        FactoryGirl.create(:barcode_trackable_pairing, barcode_id: barcode.id, trackable_id: @trackable.id)
        valid_barcode_scan_attributes = FactoryGirl.attributes_for(:barcode_scan,
                                                                   barcode_reader_id:  @barcode_reader.id,
                                                                   barcode_id:         barcode.id)
        BarcodeScan.create! valid_barcode_scan_attributes
        expect {
          post :create, {:rfid_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(0)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved rfid_scan as @rfid_scan" do
        expect {
          post :create, {:rfid_scan => invalid_transient_attributes}, valid_session
        }.to change(RfidScan, :count).by(0)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:updated_valid_rfid_scan, rfid_reader_id: @rfid_reader.id, rfid_id: @updated_rfid.id)
      }


      it "updates the requested rfid_scan" do
        rfid_scan = RfidScan.create! valid_attributes
        put :update, {:id => rfid_scan.to_param, :rfid_scan => new_attributes}, valid_session
        rfid_scan.reload
      end

      it "assigns the requested rfid_scan as @rfid_scan" do
        rfid_scan = RfidScan.create! valid_attributes
        put :update, {:id => rfid_scan.to_param, :rfid_scan => valid_attributes}, valid_session
        expect(assigns(:rfid_scan)).to eq(rfid_scan)
      end

      it "redirects to the rfid_scan" do
        rfid_scan = RfidScan.create! valid_attributes
        put :update, {:id => rfid_scan.to_param, :rfid_scan => valid_attributes}, valid_session
        expect(response).to redirect_to(rfid_scan)
      end
    end

    context "with invalid params" do
      it "assigns the rfid_scan as @rfid_scan" do
        rfid_scan = RfidScan.create! valid_attributes
        put :update, {:id => rfid_scan.to_param, :rfid_scan => invalid_attributes}, valid_session
        expect(assigns(:rfid_scan)).to eq(rfid_scan)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested rfid_scan" do
      rfid_scan = RfidScan.create! valid_attributes
      expect {
        delete :destroy, {:id => rfid_scan.to_param}, valid_session
      }.to change(RfidScan, :count).by(-1)
    end

    it "redirects to the rfid_scans list" do
      rfid_scan = RfidScan.create! valid_attributes
      delete :destroy, {:id => rfid_scan.to_param}, valid_session
      expect(response).to redirect_to(rfid_scans_url)
    end
  end
end
