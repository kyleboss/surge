require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InventorySnapshotsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # InventorySnapshot. As you add validations to InventorySnapshot, be sure to
  # adjust the attributes here as well.
  before(:each) do
    address = FactoryGirl.create(:address)
    @hospital = FactoryGirl.create(:hospital, address_id: address.id)
    @location = FactoryGirl.create(:location, hospital_id: @hospital.id)
    @second_location = FactoryGirl.create(:location, hospital_id: @hospital.id)
  end

  let(:valid_attributes) { FactoryGirl.attributes_for(:inventory_snapshot, location_id: @location.id) }

  let(:invalid_attributes) { FactoryGirl.attributes_for(:invalid_inventory_snapshot, location_id: nil) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # InventorySnapshotsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all inventory_snapshots as @inventory_snapshots" do
      inventory_snapshot = InventorySnapshot.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:inventory_snapshots)).to eq([inventory_snapshot])
    end
  end

  describe "GET #show" do
    it "assigns the requested inventory_snapshot as @inventory_snapshot" do
      inventory_snapshot = InventorySnapshot.create! valid_attributes
      get :show, {:id => inventory_snapshot.to_param}, valid_session
      expect(assigns(:inventory_snapshot)).to eq(inventory_snapshot)
    end
  end

  describe "GET #new" do
    it "assigns a new inventory_snapshot as @inventory_snapshot" do
      get :new, {}, valid_session
      expect(assigns(:inventory_snapshot)).to be_a_new(InventorySnapshot)
    end
  end

  describe "GET #edit" do
    it "assigns the requested inventory_snapshot as @inventory_snapshot" do
      inventory_snapshot = InventorySnapshot.create! valid_attributes
      get :edit, {:id => inventory_snapshot.to_param}, valid_session
      expect(assigns(:inventory_snapshot)).to eq(inventory_snapshot)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new InventorySnapshot" do
        expect {
          post :create, {:inventory_snapshot => valid_attributes}, valid_session
        }.to change(InventorySnapshot, :count).by(1)
      end

      it "assigns a newly created inventory_snapshot as @inventory_snapshot" do
        post :create, {:inventory_snapshot => valid_attributes}, valid_session
        expect(assigns(:inventory_snapshot)).to be_a(InventorySnapshot)
        expect(assigns(:inventory_snapshot)).to be_persisted
      end

      it "redirects to the created inventory_snapshot" do
        post :create, {:inventory_snapshot => valid_attributes}, valid_session
        expect(response).to redirect_to(InventorySnapshot.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved inventory_snapshot as @inventory_snapshot" do
        post :create, {:inventory_snapshot => invalid_attributes}, valid_session
        expect(assigns(:inventory_snapshot)).to be_a_new(InventorySnapshot)
      end

      it "re-renders the 'new' template" do
        post :create, {:inventory_snapshot => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "POST #make_inventory_snapshot" do
    context "with valid params" do
      before(:each) do
        @trackable1 = FactoryGirl.create(:updated_valid_trackable)
        @trackable2 = FactoryGirl.create(:updated_valid_trackable)
        @trackable3 = FactoryGirl.create(:updated_valid_trackable)
        @rfid1 = FactoryGirl.create(:rfid, hardware_identifier: "abc1")
        @rfid2 = FactoryGirl.create(:rfid, hardware_identifier: "abc2")
        @rfid3 = FactoryGirl.create(:rfid, hardware_identifier: "abc3")
        puts "@rfid1: #{@rfid1.id}, @rfid2: #{@rfid2.id}, @rfid3: #{@rfid3.id}"
        FactoryGirl.create(:rfid_trackable_pairing, rfid_id: @rfid1.id, trackable_id: @trackable1.id)
        FactoryGirl.create(:rfid_trackable_pairing, rfid_id: @rfid2.id, trackable_id: @trackable2.id)
        FactoryGirl.create(:rfid_trackable_pairing, rfid_id: @rfid3.id, trackable_id: @trackable3.id)
        @location1 = FactoryGirl.create(:location, hospital_id: @hospital.id, name: "1a")
        @location2 = FactoryGirl.create(:location, hospital_id: @hospital.id, name: "2b")
        @antenna1 = FactoryGirl.create(:antenna, hardware_identifier: "123a", location_id: @location1.id)
        @antenna2 = FactoryGirl.create(:antenna, hardware_identifier: "123b", location_id: @location2.id)
      end

      let(:valid_attributes_with_rfids) {
        {antenna_hardware_identifier: @antenna1.hardware_identifier,
         rfid_hardware_identifiers: [@rfid1.hardware_identifier, @rfid2.hardware_identifier]}
      }

      let(:valid_attributes_with_rfid) {
        {antenna_hardware_identifier: @antenna1.hardware_identifier,
         rfid_hardware_identifiers: [@rfid1.hardware_identifier]}
      }

      it "should create an inventory snapshot" do
        expect {
          post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfids}, valid_session
        }.to change(InventorySnapshot, :count).by(1)
      end

      it "should create inventory snapshot content entries" do
        expect {
          post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfids}, valid_session
        }.to change(InventorySnapshotContent, :count).by(2)
      end
      context "when drugs are once detected but then not in a specific location" do
        it "should create arrival entries" do
          expect {
            post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfids}, valid_session
          }.to change(Arrival, :count).by(2)
        end

        it "should not create departure entries" do
          expect {
            post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfids}, valid_session
          }.to change(Departure, :count).by(0)
        end
      end

      context "when drugs are once detected but then not in a specific location" do
        it "should create appropriate departure entries" do
          post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfids}, valid_session
          expect {
            post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfid}, valid_session
          }.to change(Departure, :count).by(1)
        end

        it "should not create new arrival entries" do
          post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfids}, valid_session
          expect {
            post :make_inventory_snapshot, {:inventory_snapshot => valid_attributes_with_rfid}, valid_session
          }.to change(Arrival, :count).by(0)
        end
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:updated_valid_inventory_snapshot, location_id: @second_location.id)
      }

      it "updates the requested inventory_snapshot" do
        inventory_snapshot = InventorySnapshot.create! valid_attributes
        put :update, {:id => inventory_snapshot.to_param, :inventory_snapshot => new_attributes}, valid_session
        inventory_snapshot.reload
      end

      it "assigns the requested inventory_snapshot as @inventory_snapshot" do
        inventory_snapshot = InventorySnapshot.create! valid_attributes
        put :update, {:id => inventory_snapshot.to_param, :inventory_snapshot => valid_attributes}, valid_session
        expect(assigns(:inventory_snapshot)).to eq(inventory_snapshot)
      end

      it "redirects to the inventory_snapshot" do
        inventory_snapshot = InventorySnapshot.create! valid_attributes
        put :update, {:id => inventory_snapshot.to_param, :inventory_snapshot => valid_attributes}, valid_session
        expect(response).to redirect_to(inventory_snapshot)
      end
    end

    context "with invalid params" do
      it "assigns the inventory_snapshot as @inventory_snapshot" do
        inventory_snapshot = InventorySnapshot.create! valid_attributes
        put :update, {:id => inventory_snapshot.to_param, :inventory_snapshot => invalid_attributes}, valid_session
        expect(assigns(:inventory_snapshot)).to eq(inventory_snapshot)
      end

      it "re-renders the 'edit' template" do
        inventory_snapshot = InventorySnapshot.create! valid_attributes
        put :update, {:id => inventory_snapshot.to_param, :inventory_snapshot => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested inventory_snapshot" do
      inventory_snapshot = InventorySnapshot.create! valid_attributes
      expect {
        delete :destroy, {:id => inventory_snapshot.to_param}, valid_session
      }.to change(InventorySnapshot, :count).by(-1)
    end

    it "redirects to the inventory_snapshots list" do
      inventory_snapshot = InventorySnapshot.create! valid_attributes
      delete :destroy, {:id => inventory_snapshot.to_param}, valid_session
      expect(response).to redirect_to(inventory_snapshots_url)
    end
  end

end
