require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BarcodeScansController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # BarcodeScan. As you add validations to BarcodeScan, be sure to
  # adjust the attributes here as well.
  before(:each) do
    address = FactoryGirl.create(:address)
    @hospital = FactoryGirl.create(:hospital, address_id: address.id)
    @updated_trackable = FactoryGirl.create(:updated_valid_trackable)
    @barcode_reader = FactoryGirl.create(:barcode_reader, hospital_id: @hospital.id)
    @barcode = FactoryGirl.create(:barcode)
    FactoryGirl.create(:barcode_trackable_pairing, barcode_id: @barcode.id, trackable_id: @updated_trackable.id)
  end

  let(:valid_transient_attributes) {
    { barcode_reader_hardware_identifier: @barcode_reader.hardware_identifier, barcode_code: @barcode.code }
  }

  let(:invalid_transient_attributes) { { barcode_reader_hardware_identifier: nil, barcode_code: nil } }

  let(:valid_attributes) {
    FactoryGirl.attributes_for(:barcode_scan, barcode_reader_id: @barcode_reader.id, barcode_id: @barcode.id)
  }

  let(:new_attributes) {
    FactoryGirl.attributes_for(:updated_valid_barcode_scan,
                               barcode_reader_id: @barcode_reader.id,
                               barcode_id:      @updated_barcode_id)
  }
  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:invalid_barcode_scan, barcode_reader_id: nil, barcode_id: @barcode.id)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BarcodeScansController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all barcode_scans as @barcode_scans" do
      barcode_scan = BarcodeScan.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:barcode_scans)).to eq([barcode_scan])
    end
  end

  describe "GET #show" do
    it "assigns the requested barcode_scan as @barcode_scan" do
      barcode_scan = BarcodeScan.create! valid_attributes
      get :show, {:id => barcode_scan.to_param}, valid_session
      expect(assigns(:barcode_scan)).to eq(barcode_scan)
    end
  end

  describe "GET #new" do
    it "assigns a new barcode_scan as @barcode_scan" do
      get :new, {}, valid_session
      expect(assigns(:barcode_scan)).to be_a_new(BarcodeScan)
    end
  end

  describe "GET #edit" do
    it "assigns the requested barcode_scan as @barcode_scan" do
      barcode_scan = BarcodeScan.create! valid_attributes
      get :edit, {:id => barcode_scan.to_param}, valid_session
      expect(assigns(:barcode_scan)).to eq(barcode_scan)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      before(:each) do
        @rfid_reader = FactoryGirl.create(:rfid_reader, hospital_id: @hospital.id)
      end

      it "creates a new BarcodeScan" do
        expect {
          post :create, {:barcode_scan => valid_transient_attributes}, valid_session
        }.to change(BarcodeScan, :count).by(1)
      end

      it "creates a new RfidTrackablePairing" do

        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    @rfid_reader.id,
                           barcode_reader_id: @barcode_reader.id)
        rfid = FactoryGirl.create(:rfid)
        valid_rfid_scan_attributes = FactoryGirl.attributes_for(:rfid_scan,
                                                                rfid_reader_id:  @rfid_reader.id,
                                                                rfid_id:         rfid.id)
        RfidScan.create! valid_rfid_scan_attributes
        expect {
          post :create, {:barcode_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(1)
      end

      it "doesn't create a new RfidTrackablePairing if longer than 5 seconds" do
        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    @rfid_reader.id,
                           barcode_reader_id: @barcode_reader.id)
        rfid = FactoryGirl.create(:rfid)
        early_rfid_scan_attributes = FactoryGirl.attributes_for(:rfid_scan,
                                                                rfid_reader_id:  @rfid_reader.id,
                                                                rfid_id:         rfid.id,
                                                                created_at:      Time.now - 6.minutes)
        RfidScan.create! early_rfid_scan_attributes
        expect {
          post :create, {:barcode_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(0)
      end

      it "doesn't create a new RfidTrackablePairing if rfid already paired" do
        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    @rfid_reader.id,
                           barcode_reader_id: @barcode_reader.id)
        rfid = FactoryGirl.create(:rfid)
        FactoryGirl.create(:rfid_trackable_pairing, rfid_id: rfid.id, trackable_id: @updated_trackable.id)
        valid_rfid_scan_attributes = FactoryGirl.attributes_for(:rfid_scan,
                                                                rfid_reader_id:  @rfid_reader.id,
                                                                rfid_id:         rfid.id)
        RfidScan.create! valid_rfid_scan_attributes
        expect {
          post :create, {:barcode_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(0)
      end

      it "doesn't create a new RfidTrackablePairing if readers not compatible" do
        second_barcode_reader = FactoryGirl.create(:barcode_reader, hospital_id: @hospital.id)
        FactoryGirl.create(:rfid_reader_barcode_reader_pairing,
                           rfid_reader_id:    @rfid_reader.id,
                           barcode_reader_id: second_barcode_reader.id)
        rfid = FactoryGirl.create(:rfid)
        valid_rfid_scan_attributes = FactoryGirl.attributes_for(:rfid_scan,
                                                                rfid_reader_id:  @rfid_reader.id,
                                                                rfid_id:         rfid.id)
        RfidScan.create! valid_rfid_scan_attributes
        expect {
          post :create, {:barcode_scan => valid_transient_attributes}, valid_session
        }.to change(RfidTrackablePairing, :count).by(0)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved barcode_scan as @barcode_scan" do
        expect {
          post :create, {:barcode_scan => invalid_transient_attributes}, valid_session
        }.to change(BarcodeScan, :count).by(0)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do

      it "updates the requested barcode_scan" do
        barcode_scan = BarcodeScan.create! valid_attributes
        put :update, {:id => barcode_scan.to_param, :barcode_scan => new_attributes}, valid_session
        barcode_scan.reload
      end

      it "assigns the requested barcode_scan as @barcode_scan" do
        barcode_scan = BarcodeScan.create! valid_attributes
        put :update, {:id => barcode_scan.to_param, :barcode_scan => valid_attributes}, valid_session
        expect(assigns(:barcode_scan)).to eq(barcode_scan)
      end

      it "redirects to the barcode_scan" do
        barcode_scan = BarcodeScan.create! valid_attributes
        put :update, {:id => barcode_scan.to_param, :barcode_scan => valid_attributes}, valid_session
        expect(response).to redirect_to(barcode_scan)
      end
    end

    context "with invalid params" do
      it "assigns the barcode_scan as @barcode_scan" do
        barcode_scan = BarcodeScan.create! valid_attributes
        put :update, {:id => barcode_scan.to_param, :barcode_scan => invalid_attributes}, valid_session
        expect(assigns(:barcode_scan)).to eq(barcode_scan)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested barcode_scan" do
      barcode_scan = BarcodeScan.create! valid_attributes
      expect {
        delete :destroy, {:id => barcode_scan.to_param}, valid_session
      }.to change(BarcodeScan, :count).by(-1)
    end

    it "redirects to the barcode_scans list" do
      barcode_scan = BarcodeScan.create! valid_attributes
      delete :destroy, {:id => barcode_scan.to_param}, valid_session
      expect(response).to redirect_to(barcode_scans_url)
    end
  end

end
